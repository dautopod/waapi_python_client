# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wa_agent.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auth_controller_authorize_code(self, body, session, **kwargs):  # noqa: E501
        """Send OTP authentication code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_authorize_code(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OTPRequest body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_controller_authorize_code_with_http_info(body, session, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_controller_authorize_code_with_http_info(body, session, **kwargs)  # noqa: E501
            return data

    def auth_controller_authorize_code_with_http_info(self, body, session, **kwargs):  # noqa: E501
        """Send OTP authentication code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_authorize_code_with_http_info(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OTPRequest body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_controller_authorize_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_controller_authorize_code`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `auth_controller_authorize_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{session}/auth/authorize-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_controller_get_captcha(self, session, **kwargs):  # noqa: E501
        """Get captcha image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_get_captcha(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: Session name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_controller_get_captcha_with_http_info(session, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_controller_get_captcha_with_http_info(session, **kwargs)  # noqa: E501
            return data

    def auth_controller_get_captcha_with_http_info(self, session, **kwargs):  # noqa: E501
        """Get captcha image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_get_captcha_with_http_info(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: Session name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_controller_get_captcha" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `auth_controller_get_captcha`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{session}/auth/captcha', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_controller_get_qr(self, session, format, **kwargs):  # noqa: E501
        """Get QR code for pairing WhatsApp API.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_get_qr(session, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: Session name (required)
        :param object format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_controller_get_qr_with_http_info(session, format, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_controller_get_qr_with_http_info(session, format, **kwargs)  # noqa: E501
            return data

    def auth_controller_get_qr_with_http_info(self, session, format, **kwargs):  # noqa: E501
        """Get QR code for pairing WhatsApp API.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_get_qr_with_http_info(session, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: Session name (required)
        :param object format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_controller_get_qr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `auth_controller_get_qr`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `auth_controller_get_qr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{session}/auth/qr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_controller_request_code(self, body, session, **kwargs):  # noqa: E501
        """Request authentication code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_request_code(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestCodeRequest body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_controller_request_code_with_http_info(body, session, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_controller_request_code_with_http_info(body, session, **kwargs)  # noqa: E501
            return data

    def auth_controller_request_code_with_http_info(self, body, session, **kwargs):  # noqa: E501
        """Request authentication code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_request_code_with_http_info(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestCodeRequest body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_controller_request_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_controller_request_code`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `auth_controller_request_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{session}/auth/request-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_controller_save_captcha(self, body, session, **kwargs):  # noqa: E501
        """Enter captcha code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_save_captcha(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CaptchaBody body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_controller_save_captcha_with_http_info(body, session, **kwargs)  # noqa: E501
        else:
            (data) = self.auth_controller_save_captcha_with_http_info(body, session, **kwargs)  # noqa: E501
            return data

    def auth_controller_save_captcha_with_http_info(self, body, session, **kwargs):  # noqa: E501
        """Enter captcha code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_controller_save_captcha_with_http_info(body, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CaptchaBody body: (required)
        :param object session: Session name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_controller_save_captcha" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `auth_controller_save_captcha`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `auth_controller_save_captcha`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{session}/auth/captcha', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
