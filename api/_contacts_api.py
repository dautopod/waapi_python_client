# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wa_agent.api_client import ApiClient


class ContactsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def contacts_controller_block(self, body, **kwargs):  # noqa: E501
        """Block contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_block(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_block_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_block_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def contacts_controller_block_with_http_info(self, body, **kwargs):  # noqa: E501
        """Block contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_block_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_block" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `contacts_controller_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/block', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_check_exists(self, phone, session, **kwargs):  # noqa: E501
        """Check phone number is registered in WhatsApp.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_check_exists(phone, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: The phone number to check (required)
        :param object session: (required)
        :return: WANumberExistResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_check_exists_with_http_info(phone, session, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_check_exists_with_http_info(phone, session, **kwargs)  # noqa: E501
            return data

    def contacts_controller_check_exists_with_http_info(self, phone, session, **kwargs):  # noqa: E501
        """Check phone number is registered in WhatsApp.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_check_exists_with_http_info(phone, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: The phone number to check (required)
        :param object session: (required)
        :return: WANumberExistResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_check_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `contacts_controller_check_exists`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `contacts_controller_check_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/check-exists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WANumberExistResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_get(self, contact_id, session, **kwargs):  # noqa: E501
        """Get contact basic info  # noqa: E501

        The method always return result, even if the phone number is not registered in WhatsApp. For that - use /contacts/check-exists endpoint below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_get_with_http_info(contact_id, session, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_get_with_http_info(contact_id, session, **kwargs)  # noqa: E501
            return data

    def contacts_controller_get_with_http_info(self, contact_id, session, **kwargs):  # noqa: E501
        """Get contact basic info  # noqa: E501

        The method always return result, even if the phone number is not registered in WhatsApp. For that - use /contacts/check-exists endpoint below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_with_http_info(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `contacts_controller_get`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `contacts_controller_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'contact_id' in params:
            query_params.append(('contactId', params['contact_id']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_get_about(self, contact_id, session, **kwargs):  # noqa: E501
        """Gets the Contact's \"about\" info  # noqa: E501

        Returns null if you do not have permission to read their status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_about(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_get_about_with_http_info(contact_id, session, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_get_about_with_http_info(contact_id, session, **kwargs)  # noqa: E501
            return data

    def contacts_controller_get_about_with_http_info(self, contact_id, session, **kwargs):  # noqa: E501
        """Gets the Contact's \"about\" info  # noqa: E501

        Returns null if you do not have permission to read their status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_about_with_http_info(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_get_about" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `contacts_controller_get_about`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `contacts_controller_get_about`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'contact_id' in params:
            query_params.append(('contactId', params['contact_id']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/about', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_get_all(self, session, **kwargs):  # noqa: E501
        """Get all contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_all(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: (required)
        :param object sort_by: Sort by field
        :param object sort_order: Sort order - <b>desc</b>ending (Z => A, New first) or <b>asc</b>ending (A => Z, Old first)
        :param object limit:
        :param object offset:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_get_all_with_http_info(session, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_get_all_with_http_info(session, **kwargs)  # noqa: E501
            return data

    def contacts_controller_get_all_with_http_info(self, session, **kwargs):  # noqa: E501
        """Get all contacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_all_with_http_info(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object session: (required)
        :param object sort_by: Sort by field
        :param object sort_order: Sort order - <b>desc</b>ending (Z => A, New first) or <b>asc</b>ending (A => Z, Old first)
        :param object limit:
        :param object offset:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session', 'sort_by', 'sort_order', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_get_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `contacts_controller_get_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_get_profile_picture(self, contact_id, session, **kwargs):  # noqa: E501
        """Get contact's profile picture URL  # noqa: E501

        If privacy settings do not allow to get the picture, the method will return null.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_profile_picture(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_get_profile_picture_with_http_info(contact_id, session, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_get_profile_picture_with_http_info(contact_id, session, **kwargs)  # noqa: E501
            return data

    def contacts_controller_get_profile_picture_with_http_info(self, contact_id, session, **kwargs):  # noqa: E501
        """Get contact's profile picture URL  # noqa: E501

        If privacy settings do not allow to get the picture, the method will return null.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_get_profile_picture_with_http_info(contact_id, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object contact_id: (required)
        :param object session: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_id', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_get_profile_picture" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params or
                params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `contacts_controller_get_profile_picture`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `contacts_controller_get_profile_picture`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'contact_id' in params:
            query_params.append(('contactId', params['contact_id']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/profile-picture', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def contacts_controller_unblock(self, body, **kwargs):  # noqa: E501
        """Unblock contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_unblock(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.contacts_controller_unblock_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.contacts_controller_unblock_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def contacts_controller_unblock_with_http_info(self, body, **kwargs):  # noqa: E501
        """Unblock contact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.contacts_controller_unblock_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method contacts_controller_unblock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `contacts_controller_unblock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/contacts/unblock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
