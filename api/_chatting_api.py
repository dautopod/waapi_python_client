# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wa_agent.api_client import ApiClient


class ChattingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def chatting_controller_deprecated_check_number_status(self, phone, session, **kwargs):  # noqa: E501
        """Check number status  # noqa: E501

        DEPRECATED. Use \"POST /contacts/check-exists\" instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_deprecated_check_number_status(phone, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: The phone number to check (required)
        :param object session: (required)
        :return: WANumberExistResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_deprecated_check_number_status_with_http_info(phone, session, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_deprecated_check_number_status_with_http_info(phone, session, **kwargs)  # noqa: E501
            return data

    def chatting_controller_deprecated_check_number_status_with_http_info(self, phone, session, **kwargs):  # noqa: E501
        """Check number status  # noqa: E501

        DEPRECATED. Use \"POST /contacts/check-exists\" instead  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_deprecated_check_number_status_with_http_info(phone, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: The phone number to check (required)
        :param object session: (required)
        :return: WANumberExistResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_deprecated_check_number_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `chatting_controller_deprecated_check_number_status`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `chatting_controller_deprecated_check_number_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/checkNumberStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WANumberExistResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_forward_message(self, body, **kwargs):  # noqa: E501
        """chatting_controller_forward_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_forward_message(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageForwardRequest body: (required)
        :return: WAMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_forward_message_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_forward_message_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_forward_message_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_forward_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_forward_message_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageForwardRequest body: (required)
        :return: WAMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_forward_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_forward_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/forwardMessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WAMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_get_messages(self, chat_id, session, limit, **kwargs):  # noqa: E501
        """Get messages in a chat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_get_messages(chat_id, session, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object chat_id: (required)
        :param object session: (required)
        :param object limit: (required)
        :param object download_media: Download media for messages
        :param object offset:
        :param object filter_timestamp_lte: Filter messages before this timestamp (inclusive)
        :param object filter_timestamp_gte: Filter messages after this timestamp (inclusive)
        :param object filter_from_me: From me filter (by default shows all messages)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_get_messages_with_http_info(chat_id, session, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_get_messages_with_http_info(chat_id, session, limit, **kwargs)  # noqa: E501
            return data

    def chatting_controller_get_messages_with_http_info(self, chat_id, session, limit, **kwargs):  # noqa: E501
        """Get messages in a chat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_get_messages_with_http_info(chat_id, session, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object chat_id: (required)
        :param object session: (required)
        :param object limit: (required)
        :param object download_media: Download media for messages
        :param object offset:
        :param object filter_timestamp_lte: Filter messages before this timestamp (inclusive)
        :param object filter_timestamp_gte: Filter messages after this timestamp (inclusive)
        :param object filter_from_me: From me filter (by default shows all messages)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chat_id', 'session', 'limit', 'download_media', 'offset', 'filter_timestamp_lte', 'filter_timestamp_gte', 'filter_from_me']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_get_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chat_id' is set
        if ('chat_id' not in params or
                params['chat_id'] is None):
            raise ValueError("Missing the required parameter `chat_id` when calling `chatting_controller_get_messages`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `chatting_controller_get_messages`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `chatting_controller_get_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'download_media' in params:
            query_params.append(('downloadMedia', params['download_media']))  # noqa: E501
        if 'chat_id' in params:
            query_params.append(('chatId', params['chat_id']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter_timestamp_lte' in params:
            query_params.append(('filter.timestamp.lte', params['filter_timestamp_lte']))  # noqa: E501
        if 'filter_timestamp_gte' in params:
            query_params.append(('filter.timestamp.gte', params['filter_timestamp_gte']))  # noqa: E501
        if 'filter_from_me' in params:
            query_params.append(('filter.fromMe', params['filter_from_me']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_reply(self, body, **kwargs):  # noqa: E501
        """DEPRECATED - you can set \"reply_to\" field when sending text, image, etc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_reply(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageReplyRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_reply_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_reply_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_reply_with_http_info(self, body, **kwargs):  # noqa: E501
        """DEPRECATED - you can set \"reply_to\" field when sending text, image, etc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_reply_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageReplyRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_reply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_reply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/reply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_buttons(self, body, **kwargs):  # noqa: E501
        """Send buttons (interactive message)  # noqa: E501

        Send Buttons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_buttons(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendButtonsRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_buttons_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_buttons_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_buttons_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send buttons (interactive message)  # noqa: E501

        Send Buttons  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_buttons_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendButtonsRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_buttons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_buttons`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendButtons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_contact_vcard(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_contact_vcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_contact_vcard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageContactVcardRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_contact_vcard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_contact_vcard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_contact_vcard_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_contact_vcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_contact_vcard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageContactVcardRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_contact_vcard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_contact_vcard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendContactVcard', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_file(self, body, **kwargs):  # noqa: E501
        """Send a file  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_file(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageFileRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_file_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_file_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_file_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a file  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_file_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageFileRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_image(self, body, **kwargs):  # noqa: E501
        """Send an image  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_image(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageImageRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_image_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_image_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_image_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send an image  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_image_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageImageRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendImage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_link_preview(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_link_preview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_link_preview(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLinkPreviewRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_link_preview_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_link_preview_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_link_preview_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_link_preview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_link_preview_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLinkPreviewRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_link_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_link_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendLinkPreview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_location(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_location(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLocationRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_location_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_location_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_location_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_location_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLocationRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendLocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_poll(self, body, **kwargs):  # noqa: E501
        """Send a poll with options  # noqa: E501

        You can use it as buttons or list replacement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_poll(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessagePollRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_poll_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_poll_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_poll_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a poll with options  # noqa: E501

        You can use it as buttons or list replacement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_poll_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessagePollRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_poll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_poll`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendPoll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_seen(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_seen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_seen(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendSeenRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_seen_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_seen_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_seen_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_send_seen  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_seen_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendSeenRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_seen" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_seen`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendSeen', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_text(self, body, **kwargs):  # noqa: E501
        """Send a text message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_text(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageTextRequest body: (required)
        :return: WAMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_text_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_text_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_text_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a text message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_text_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageTextRequest body: (required)
        :return: WAMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WAMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_text_get(self, phone, text, session, **kwargs):  # noqa: E501
        """Send a text message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_text_get(phone, text, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: (required)
        :param object text: (required)
        :param object session: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_text_get_with_http_info(phone, text, session, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_text_get_with_http_info(phone, text, session, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_text_get_with_http_info(self, phone, text, session, **kwargs):  # noqa: E501
        """Send a text message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_text_get_with_http_info(phone, text, session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object phone: (required)
        :param object text: (required)
        :param object session: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone', 'text', 'session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_text_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone' is set
        if ('phone' not in params or
                params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `chatting_controller_send_text_get`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `chatting_controller_send_text_get`")  # noqa: E501
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `chatting_controller_send_text_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendText', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_video(self, body, **kwargs):  # noqa: E501
        """Send a video  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_video(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageVideoRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_video_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_video_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_video_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a video  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_video_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageVideoRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_video`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendVideo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_send_voice(self, body, **kwargs):  # noqa: E501
        """Send an voice message  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_voice(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageVoiceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_send_voice_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_send_voice_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_send_voice_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send an voice message  # noqa: E501

        Either from an URL or base64 data - look at the request schemas for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_send_voice_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageVoiceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_send_voice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_send_voice`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/sendVoice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_set_reaction(self, body, **kwargs):  # noqa: E501
        """React to a message with an emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_set_reaction(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageReactionRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_set_reaction_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_set_reaction_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_set_reaction_with_http_info(self, body, **kwargs):  # noqa: E501
        """React to a message with an emoji  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_set_reaction_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageReactionRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_set_reaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_set_reaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/reaction', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_set_star(self, body, **kwargs):  # noqa: E501
        """Star or unstar a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_set_star(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageStarRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_set_star_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_set_star_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_set_star_with_http_info(self, body, **kwargs):  # noqa: E501
        """Star or unstar a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_set_star_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageStarRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_set_star" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_set_star`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/star', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_start_typing(self, body, **kwargs):  # noqa: E501
        """chatting_controller_start_typing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_start_typing(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_start_typing_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_start_typing_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_start_typing_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_start_typing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_start_typing_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_start_typing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_start_typing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/startTyping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chatting_controller_stop_typing(self, body, **kwargs):  # noqa: E501
        """chatting_controller_stop_typing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_stop_typing(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chatting_controller_stop_typing_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.chatting_controller_stop_typing_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def chatting_controller_stop_typing_with_http_info(self, body, **kwargs):  # noqa: E501
        """chatting_controller_stop_typing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chatting_controller_stop_typing_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChatRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chatting_controller_stop_typing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `chatting_controller_stop_typing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/stopTyping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
