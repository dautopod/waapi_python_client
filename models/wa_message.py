# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WAMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'timestamp': 'object',
        '_from': 'object',
        'from_me': 'object',
        'to': 'object',
        'participant': 'object',
        'body': 'object',
        'has_media': 'object',
        'media': 'object',
        'media_url': 'object',
        'ack': 'object',
        'ack_name': 'object',
        'author': 'object',
        'location': 'object',
        'v_cards': 'object',
        'data': 'object',
        'reply_to': 'ReplyToMessage'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        '_from': 'from',
        'from_me': 'fromMe',
        'to': 'to',
        'participant': 'participant',
        'body': 'body',
        'has_media': 'hasMedia',
        'media': 'media',
        'media_url': 'mediaUrl',
        'ack': 'ack',
        'ack_name': 'ackName',
        'author': 'author',
        'location': 'location',
        'v_cards': 'vCards',
        'data': '_data',
        'reply_to': 'replyTo'
    }

    def __init__(self, id=None, timestamp=None, _from=None, from_me=None, to=None, participant=None, body=None, has_media=None, media=None, media_url=None, ack=None, ack_name=None, author=None, location=None, v_cards=None, data=None, reply_to=None):  # noqa: E501
        """WAMessage - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._timestamp = None
        self.__from = None
        self._from_me = None
        self._to = None
        self._participant = None
        self._body = None
        self._has_media = None
        self._media = None
        self._media_url = None
        self._ack = None
        self._ack_name = None
        self._author = None
        self._location = None
        self._v_cards = None
        self._data = None
        self._reply_to = None
        self.discriminator = None
        self.id = id
        self.timestamp = timestamp
        self._from = _from
        self.from_me = from_me
        self.to = to
        self.participant = participant
        self.body = body
        self.has_media = has_media
        if media is not None:
            self.media = media
        self.media_url = media_url
        self.ack = ack
        self.ack_name = ack_name
        if author is not None:
            self.author = author
        if location is not None:
            self.location = location
        if v_cards is not None:
            self.v_cards = v_cards
        if data is not None:
            self.data = data
        if reply_to is not None:
            self.reply_to = reply_to

    @property
    def id(self):
        """Gets the id of this WAMessage.  # noqa: E501

        Message ID  # noqa: E501

        :return: The id of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WAMessage.

        Message ID  # noqa: E501

        :param id: The id of this WAMessage.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this WAMessage.  # noqa: E501

        Unix timestamp for when the message was created  # noqa: E501

        :return: The timestamp of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WAMessage.

        Unix timestamp for when the message was created  # noqa: E501

        :param timestamp: The timestamp of this WAMessage.  # noqa: E501
        :type: object
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def _from(self):
        """Gets the _from of this WAMessage.  # noqa: E501

        ID for the Chat that this message was sent to, except if the message was sent by the current user   # noqa: E501

        :return: The _from of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this WAMessage.

        ID for the Chat that this message was sent to, except if the message was sent by the current user   # noqa: E501

        :param _from: The _from of this WAMessage.  # noqa: E501
        :type: object
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def from_me(self):
        """Gets the from_me of this WAMessage.  # noqa: E501

        Indicates if the message was sent by the current user  # noqa: E501

        :return: The from_me of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._from_me

    @from_me.setter
    def from_me(self, from_me):
        """Sets the from_me of this WAMessage.

        Indicates if the message was sent by the current user  # noqa: E501

        :param from_me: The from_me of this WAMessage.  # noqa: E501
        :type: object
        """
        if from_me is None:
            raise ValueError("Invalid value for `from_me`, must not be `None`")  # noqa: E501

        self._from_me = from_me

    @property
    def to(self):
        """Gets the to of this WAMessage.  # noqa: E501

         * ID for who this message is for. * If the message is sent by the current user, it will be the Chat to which the message is being sent. * If the message is sent by another user, it will be the ID for the current user.   # noqa: E501

        :return: The to of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this WAMessage.

         * ID for who this message is for. * If the message is sent by the current user, it will be the Chat to which the message is being sent. * If the message is sent by another user, it will be the ID for the current user.   # noqa: E501

        :param to: The to of this WAMessage.  # noqa: E501
        :type: object
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def participant(self):
        """Gets the participant of this WAMessage.  # noqa: E501

        For groups - participant who sent the message  # noqa: E501

        :return: The participant of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this WAMessage.

        For groups - participant who sent the message  # noqa: E501

        :param participant: The participant of this WAMessage.  # noqa: E501
        :type: object
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def body(self):
        """Gets the body of this WAMessage.  # noqa: E501

        Message content  # noqa: E501

        :return: The body of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this WAMessage.

        Message content  # noqa: E501

        :param body: The body of this WAMessage.  # noqa: E501
        :type: object
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def has_media(self):
        """Gets the has_media of this WAMessage.  # noqa: E501

        Indicates if the message has media available for download  # noqa: E501

        :return: The has_media of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._has_media

    @has_media.setter
    def has_media(self, has_media):
        """Sets the has_media of this WAMessage.

        Indicates if the message has media available for download  # noqa: E501

        :param has_media: The has_media of this WAMessage.  # noqa: E501
        :type: object
        """
        if has_media is None:
            raise ValueError("Invalid value for `has_media`, must not be `None`")  # noqa: E501

        self._has_media = has_media

    @property
    def media(self):
        """Gets the media of this WAMessage.  # noqa: E501

        Media object for the message if any and downloaded  # noqa: E501

        :return: The media of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this WAMessage.

        Media object for the message if any and downloaded  # noqa: E501

        :param media: The media of this WAMessage.  # noqa: E501
        :type: object
        """

        self._media = media

    @property
    def media_url(self):
        """Gets the media_url of this WAMessage.  # noqa: E501

        Use `media.url` instead! The URL for the media in the message if any  # noqa: E501

        :return: The media_url of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this WAMessage.

        Use `media.url` instead! The URL for the media in the message if any  # noqa: E501

        :param media_url: The media_url of this WAMessage.  # noqa: E501
        :type: object
        """
        if media_url is None:
            raise ValueError("Invalid value for `media_url`, must not be `None`")  # noqa: E501

        self._media_url = media_url

    @property
    def ack(self):
        """Gets the ack of this WAMessage.  # noqa: E501

        ACK status for the message  # noqa: E501

        :return: The ack of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._ack

    @ack.setter
    def ack(self, ack):
        """Sets the ack of this WAMessage.

        ACK status for the message  # noqa: E501

        :param ack: The ack of this WAMessage.  # noqa: E501
        :type: object
        """
        if ack is None:
            raise ValueError("Invalid value for `ack`, must not be `None`")  # noqa: E501

        self._ack = ack

    @property
    def ack_name(self):
        """Gets the ack_name of this WAMessage.  # noqa: E501

        ACK status name for the message  # noqa: E501

        :return: The ack_name of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._ack_name

    @ack_name.setter
    def ack_name(self, ack_name):
        """Sets the ack_name of this WAMessage.

        ACK status name for the message  # noqa: E501

        :param ack_name: The ack_name of this WAMessage.  # noqa: E501
        :type: object
        """
        if ack_name is None:
            raise ValueError("Invalid value for `ack_name`, must not be `None`")  # noqa: E501

        self._ack_name = ack_name

    @property
    def author(self):
        """Gets the author of this WAMessage.  # noqa: E501

        If the message was sent to a group, this field will contain the user that sent the message.  # noqa: E501

        :return: The author of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WAMessage.

        If the message was sent to a group, this field will contain the user that sent the message.  # noqa: E501

        :param author: The author of this WAMessage.  # noqa: E501
        :type: object
        """

        self._author = author

    @property
    def location(self):
        """Gets the location of this WAMessage.  # noqa: E501

        Location information contained in the message, if the message is type \"location\"  # noqa: E501

        :return: The location of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WAMessage.

        Location information contained in the message, if the message is type \"location\"  # noqa: E501

        :param location: The location of this WAMessage.  # noqa: E501
        :type: object
        """

        self._location = location

    @property
    def v_cards(self):
        """Gets the v_cards of this WAMessage.  # noqa: E501

        List of vCards contained in the message.  # noqa: E501

        :return: The v_cards of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._v_cards

    @v_cards.setter
    def v_cards(self, v_cards):
        """Sets the v_cards of this WAMessage.

        List of vCards contained in the message.  # noqa: E501

        :param v_cards: The v_cards of this WAMessage.  # noqa: E501
        :type: object
        """

        self._v_cards = v_cards

    @property
    def data(self):
        """Gets the data of this WAMessage.  # noqa: E501

        Message in a raw format that we get from WhatsApp. May be changed anytime, use it with caution! It depends a lot on the underlying backend.  # noqa: E501

        :return: The data of this WAMessage.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WAMessage.

        Message in a raw format that we get from WhatsApp. May be changed anytime, use it with caution! It depends a lot on the underlying backend.  # noqa: E501

        :param data: The data of this WAMessage.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def reply_to(self):
        """Gets the reply_to of this WAMessage.  # noqa: E501


        :return: The reply_to of this WAMessage.  # noqa: E501
        :rtype: ReplyToMessage
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this WAMessage.


        :param reply_to: The reply_to of this WAMessage.  # noqa: E501
        :type: ReplyToMessage
        """

        self._reply_to = reply_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WAMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WAMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
