# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WAMessageAckBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        '_from': 'object',
        'to': 'object',
        'participant': 'object',
        'from_me': 'object',
        'ack': 'object',
        'ack_name': 'object'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'to': 'to',
        'participant': 'participant',
        'from_me': 'fromMe',
        'ack': 'ack',
        'ack_name': 'ackName'
    }

    def __init__(self, id=None, _from=None, to=None, participant=None, from_me=None, ack=None, ack_name=None):  # noqa: E501
        """WAMessageAckBody - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self.__from = None
        self._to = None
        self._participant = None
        self._from_me = None
        self._ack = None
        self._ack_name = None
        self.discriminator = None
        self.id = id
        self._from = _from
        self.to = to
        self.participant = participant
        self.from_me = from_me
        self.ack = ack
        self.ack_name = ack_name

    @property
    def id(self):
        """Gets the id of this WAMessageAckBody.  # noqa: E501

        Message ID  # noqa: E501

        :return: The id of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WAMessageAckBody.

        Message ID  # noqa: E501

        :param id: The id of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this WAMessageAckBody.  # noqa: E501


        :return: The _from of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this WAMessageAckBody.


        :param _from: The _from of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this WAMessageAckBody.  # noqa: E501


        :return: The to of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this WAMessageAckBody.


        :param to: The to of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def participant(self):
        """Gets the participant of this WAMessageAckBody.  # noqa: E501


        :return: The participant of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this WAMessageAckBody.


        :param participant: The participant of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def from_me(self):
        """Gets the from_me of this WAMessageAckBody.  # noqa: E501


        :return: The from_me of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._from_me

    @from_me.setter
    def from_me(self, from_me):
        """Sets the from_me of this WAMessageAckBody.


        :param from_me: The from_me of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if from_me is None:
            raise ValueError("Invalid value for `from_me`, must not be `None`")  # noqa: E501

        self._from_me = from_me

    @property
    def ack(self):
        """Gets the ack of this WAMessageAckBody.  # noqa: E501


        :return: The ack of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._ack

    @ack.setter
    def ack(self, ack):
        """Sets the ack of this WAMessageAckBody.


        :param ack: The ack of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if ack is None:
            raise ValueError("Invalid value for `ack`, must not be `None`")  # noqa: E501

        self._ack = ack

    @property
    def ack_name(self):
        """Gets the ack_name of this WAMessageAckBody.  # noqa: E501


        :return: The ack_name of this WAMessageAckBody.  # noqa: E501
        :rtype: object
        """
        return self._ack_name

    @ack_name.setter
    def ack_name(self, ack_name):
        """Sets the ack_name of this WAMessageAckBody.


        :param ack_name: The ack_name of this WAMessageAckBody.  # noqa: E501
        :type: object
        """
        if ack_name is None:
            raise ValueError("Invalid value for `ack_name`, must not be `None`")  # noqa: E501

        self._ack_name = ack_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WAMessageAckBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WAMessageAckBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
