# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WAHAEnvironment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'object',
        'engine': 'object',
        'tier': 'object',
        'browser': 'object'
    }

    attribute_map = {
        'version': 'version',
        'engine': 'engine',
        'tier': 'tier',
        'browser': 'browser'
    }

    def __init__(self, version=None, engine=None, tier=None, browser=None):  # noqa: E501
        """WAHAEnvironment - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._engine = None
        self._tier = None
        self._browser = None
        self.discriminator = None
        self.version = version
        self.engine = engine
        self.tier = tier
        self.browser = browser

    @property
    def version(self):
        """Gets the version of this WAHAEnvironment.  # noqa: E501


        :return: The version of this WAHAEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WAHAEnvironment.


        :param version: The version of this WAHAEnvironment.  # noqa: E501
        :type: object
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def engine(self):
        """Gets the engine of this WAHAEnvironment.  # noqa: E501


        :return: The engine of this WAHAEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this WAHAEnvironment.


        :param engine: The engine of this WAHAEnvironment.  # noqa: E501
        :type: object
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")  # noqa: E501

        self._engine = engine

    @property
    def tier(self):
        """Gets the tier of this WAHAEnvironment.  # noqa: E501


        :return: The tier of this WAHAEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this WAHAEnvironment.


        :param tier: The tier of this WAHAEnvironment.  # noqa: E501
        :type: object
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")  # noqa: E501

        self._tier = tier

    @property
    def browser(self):
        """Gets the browser of this WAHAEnvironment.  # noqa: E501


        :return: The browser of this WAHAEnvironment.  # noqa: E501
        :rtype: object
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this WAHAEnvironment.


        :param browser: The browser of this WAHAEnvironment.  # noqa: E501
        :type: object
        """
        if browser is None:
            raise ValueError("Invalid value for `browser`, must not be `None`")  # noqa: E501

        self._browser = browser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WAHAEnvironment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WAHAEnvironment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
