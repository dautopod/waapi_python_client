# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WAMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'object',
        'mimetype': 'object',
        'filename': 'object',
        's3': 'object',
        'error': 'object'
    }

    attribute_map = {
        'url': 'url',
        'mimetype': 'mimetype',
        'filename': 'filename',
        's3': 's3',
        'error': 'error'
    }

    def __init__(self, url=None, mimetype=None, filename=None, s3=None, error=None):  # noqa: E501
        """WAMedia - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._mimetype = None
        self._filename = None
        self._s3 = None
        self._error = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if mimetype is not None:
            self.mimetype = mimetype
        if filename is not None:
            self.filename = filename
        if s3 is not None:
            self.s3 = s3
        if error is not None:
            self.error = error

    @property
    def url(self):
        """Gets the url of this WAMedia.  # noqa: E501

        The URL for the media in the message if any  # noqa: E501

        :return: The url of this WAMedia.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WAMedia.

        The URL for the media in the message if any  # noqa: E501

        :param url: The url of this WAMedia.  # noqa: E501
        :type: object
        """

        self._url = url

    @property
    def mimetype(self):
        """Gets the mimetype of this WAMedia.  # noqa: E501

        mimetype for the media in the message if any  # noqa: E501

        :return: The mimetype of this WAMedia.  # noqa: E501
        :rtype: object
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this WAMedia.

        mimetype for the media in the message if any  # noqa: E501

        :param mimetype: The mimetype of this WAMedia.  # noqa: E501
        :type: object
        """

        self._mimetype = mimetype

    @property
    def filename(self):
        """Gets the filename of this WAMedia.  # noqa: E501

        The original filename in mediaUrl in the message if any  # noqa: E501

        :return: The filename of this WAMedia.  # noqa: E501
        :rtype: object
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this WAMedia.

        The original filename in mediaUrl in the message if any  # noqa: E501

        :param filename: The filename of this WAMedia.  # noqa: E501
        :type: object
        """

        self._filename = filename

    @property
    def s3(self):
        """Gets the s3 of this WAMedia.  # noqa: E501

        S3 attributes for the media in the message if you are using S3 media storage  # noqa: E501

        :return: The s3 of this WAMedia.  # noqa: E501
        :rtype: object
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this WAMedia.

        S3 attributes for the media in the message if you are using S3 media storage  # noqa: E501

        :param s3: The s3 of this WAMedia.  # noqa: E501
        :type: object
        """

        self._s3 = s3

    @property
    def error(self):
        """Gets the error of this WAMedia.  # noqa: E501

        Error message if there's an error downloading the media  # noqa: E501

        :return: The error of this WAMedia.  # noqa: E501
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this WAMedia.

        Error message if there's an error downloading the media  # noqa: E501

        :param error: The error of this WAMedia.  # noqa: E501
        :type: object
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WAMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WAMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
