# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'name': 'object',
        'invite': 'object',
        'preview': 'object',
        'picture': 'object',
        'description': 'object',
        'verified': 'object',
        'role': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'invite': 'invite',
        'preview': 'preview',
        'picture': 'picture',
        'description': 'description',
        'verified': 'verified',
        'role': 'role'
    }

    def __init__(self, id=None, name=None, invite=None, preview=None, picture=None, description=None, verified=None, role=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._invite = None
        self._preview = None
        self._picture = None
        self._description = None
        self._verified = None
        self._role = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.invite = invite
        if preview is not None:
            self.preview = preview
        if picture is not None:
            self.picture = picture
        if description is not None:
            self.description = description
        self.verified = verified
        self.role = role

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501

        Newsletter id  # noqa: E501

        :return: The id of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.

        Newsletter id  # noqa: E501

        :param id: The id of this Channel.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Channel.  # noqa: E501

        Channel name  # noqa: E501

        :return: The name of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.

        Channel name  # noqa: E501

        :param name: The name of this Channel.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def invite(self):
        """Gets the invite of this Channel.  # noqa: E501

        Invite link  # noqa: E501

        :return: The invite of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._invite

    @invite.setter
    def invite(self, invite):
        """Sets the invite of this Channel.

        Invite link  # noqa: E501

        :param invite: The invite of this Channel.  # noqa: E501
        :type: object
        """
        if invite is None:
            raise ValueError("Invalid value for `invite`, must not be `None`")  # noqa: E501

        self._invite = invite

    @property
    def preview(self):
        """Gets the preview of this Channel.  # noqa: E501

        Preview for channel's picture  # noqa: E501

        :return: The preview of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this Channel.

        Preview for channel's picture  # noqa: E501

        :param preview: The preview of this Channel.  # noqa: E501
        :type: object
        """

        self._preview = preview

    @property
    def picture(self):
        """Gets the picture of this Channel.  # noqa: E501

        Channel's picture  # noqa: E501

        :return: The picture of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Channel.

        Channel's picture  # noqa: E501

        :param picture: The picture of this Channel.  # noqa: E501
        :type: object
        """

        self._picture = picture

    @property
    def description(self):
        """Gets the description of this Channel.  # noqa: E501


        :return: The description of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Channel.


        :param description: The description of this Channel.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def verified(self):
        """Gets the verified of this Channel.  # noqa: E501


        :return: The verified of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Channel.


        :param verified: The verified of this Channel.  # noqa: E501
        :type: object
        """
        if verified is None:
            raise ValueError("Invalid value for `verified`, must not be `None`")  # noqa: E501

        self._verified = verified

    @property
    def role(self):
        """Gets the role of this Channel.  # noqa: E501


        :return: The role of this Channel.  # noqa: E501
        :rtype: object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Channel.


        :param role: The role of this Channel.  # noqa: E501
        :type: object
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
