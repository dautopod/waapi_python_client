# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NowebStoreConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'object',
        'full_sync': 'object'
    }

    attribute_map = {
        'enabled': 'enabled',
        'full_sync': 'fullSync'
    }

    def __init__(self, enabled=None, full_sync=None):  # noqa: E501
        """NowebStoreConfig - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._full_sync = None
        self.discriminator = None
        self.enabled = enabled
        self.full_sync = full_sync

    @property
    def enabled(self):
        """Gets the enabled of this NowebStoreConfig.  # noqa: E501

        Enable or disable the store for contacts, chats, and messages.  # noqa: E501

        :return: The enabled of this NowebStoreConfig.  # noqa: E501
        :rtype: object
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NowebStoreConfig.

        Enable or disable the store for contacts, chats, and messages.  # noqa: E501

        :param enabled: The enabled of this NowebStoreConfig.  # noqa: E501
        :type: object
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def full_sync(self):
        """Gets the full_sync of this NowebStoreConfig.  # noqa: E501

        Enable full sync on session initialization (when scanning QR code). Full sync will download all contacts, chats, and messages from the phone. If disabled, only messages early than 90 days will be downloaded and some contacts may be missing.  # noqa: E501

        :return: The full_sync of this NowebStoreConfig.  # noqa: E501
        :rtype: object
        """
        return self._full_sync

    @full_sync.setter
    def full_sync(self, full_sync):
        """Sets the full_sync of this NowebStoreConfig.

        Enable full sync on session initialization (when scanning QR code). Full sync will download all contacts, chats, and messages from the phone. If disabled, only messages early than 90 days will be downloaded and some contacts may be missing.  # noqa: E501

        :param full_sync: The full_sync of this NowebStoreConfig.  # noqa: E501
        :type: object
        """
        if full_sync is None:
            raise ValueError("Invalid value for `full_sync`, must not be `None`")  # noqa: E501

        self._full_sync = full_sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NowebStoreConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NowebStoreConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
