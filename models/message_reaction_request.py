# coding: utf-8

"""
    WAHA - WhatsApp HTTP API

    <b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>ðŸ“Š Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>  # noqa: E501

    OpenAPI spec version: 2024.12.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessageReactionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'object',
        'reaction': 'object',
        'session': 'object'
    }

    attribute_map = {
        'message_id': 'messageId',
        'reaction': 'reaction',
        'session': 'session'
    }

    def __init__(self, message_id=None, reaction=None, session=None):  # noqa: E501
        """MessageReactionRequest - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._reaction = None
        self._session = None
        self.discriminator = None
        self.message_id = message_id
        self.reaction = reaction
        self.session = session

    @property
    def message_id(self):
        """Gets the message_id of this MessageReactionRequest.  # noqa: E501


        :return: The message_id of this MessageReactionRequest.  # noqa: E501
        :rtype: object
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageReactionRequest.


        :param message_id: The message_id of this MessageReactionRequest.  # noqa: E501
        :type: object
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def reaction(self):
        """Gets the reaction of this MessageReactionRequest.  # noqa: E501

        Emoji to react with. Send an empty string to remove the reaction  # noqa: E501

        :return: The reaction of this MessageReactionRequest.  # noqa: E501
        :rtype: object
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this MessageReactionRequest.

        Emoji to react with. Send an empty string to remove the reaction  # noqa: E501

        :param reaction: The reaction of this MessageReactionRequest.  # noqa: E501
        :type: object
        """
        if reaction is None:
            raise ValueError("Invalid value for `reaction`, must not be `None`")  # noqa: E501

        self._reaction = reaction

    @property
    def session(self):
        """Gets the session of this MessageReactionRequest.  # noqa: E501


        :return: The session of this MessageReactionRequest.  # noqa: E501
        :rtype: object
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this MessageReactionRequest.


        :param session: The session of this MessageReactionRequest.  # noqa: E501
        :type: object
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")  # noqa: E501

        self._session = session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageReactionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageReactionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
